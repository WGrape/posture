#!/bin/sh

if [ "${POSTURE_PATH}" == "" ]; then
    echo "缺少POSTURE_PATH配置 (You missed the configuration of POSTURE_PATH)"
    exit 1
fi
. $POSTURE_PATH/include/sdk.sh

# start to adjust
adjust(){
    if ! check_config; then
        print_error "adjust failed: check_config"
        exit 1
    fi

    echo "正在调整中 (posture is adjusting)..."

    # 1. git adjust
    # git ignore fileMode
    git config --global --add core.fileMode false

    # 2. code style adjust
    # copy .editorconfig.template to your project
    if [ ! -f "./.editorconfig" ]; then
        cp $POSTURE_PATH/template/.editorconfig.template ./.editorconfig
    fi

    print_ok "> 完成 (done)"
}

# start to set the global hook
hook(){
    if [ $1 == "" ]; then
        print_error "缺少目录参数 (miss the directory param)"
        exit 1
    fi

    projectDir=$1
    git config --global core.hooksPath ${projectDir}/include/hooks
    chmod a+x ${projectDir}/include/hooks/commit-msg
    chmod a+x ${projectDir}/include/hooks/post-checkout
    chmod a+x ${projectDir}/include/hooks/post-merge
    chmod a+x ${projectDir}/include/hooks/pre-commit
    chmod a+x ${projectDir}/include/hooks/pre-push

    # 如果个别项目不需要使用全局的Hook, 可以在项目的根目录下重新配置git hooksPath: git config core.hooksPath .git/hooks
    print_ok "hook successfully !"
    print_warn "If your other projects don't need require the global Hooks, they can be reconfigured in the root directory of your other projects: git config core.hooksPath .git/hooks"
}

# start to cancel the global hook
unhook(){
    git config --global core.hooksPath false
}

# update your posture version
update_version(){
    currentDir=$(pwd)
    cd $POSTURE_PATH && git pull && cd $currentDir
    # 判断是否拉取成功
    if [ $? -ne 0 ]; then
        print_error "版本更新至最新版本失败 (Failed to update the version to the latest version)"
        exit 1
    fi
    print_ok "版本更新至最新版本成功 (update to latest version successfully)"
}

# show status
status(){
    echo "The list of configuration"
    echo "> lang = ${lang}"
    echo "The list of states"
    echo "> version = ${version}"
}


COMMAND=$1
if [ "${COMMAND}" == "adjust" ]; then
    # requirement: cd to your project, then run cmd: posture adjust
    adjust
elif [ "${COMMAND}" == "hook" ]; then
    # requirement: cd to your project, then run cmd: posture hook
    hook $POSTURE_PATH
elif [ "${COMMAND}" == "unhook" ]; then
    # requirement: cd to your project, then run cmd: posture unhook
    unhook
elif [ "${COMMAND}" == "update" ]; then
    update_version
elif [ "${COMMAND}" == "status" ]; then
    status
elif [ "${COMMAND}" == "help" ] || [ "${COMMAND}" == "" ]; then
    print_logo

    echo "下面是posture支持的命令列表 (Here is support commands)"
    echo "=========================================================================="
    echo "  - hook:   设置全局钩子 (set the global git hooks)"
    echo "  - adjust: 调整代码规范 (adjust the code specification)"
    echo "  - update: 更新至最新版本 (update to latest version)"
    echo "  - status: 展示posture的状态 (show the status of posture)"
    echo "  - help:   查看帮助 (view help)"
    echo ""
else
    echo "不支持的命令: ${COMMAND} (Unknown command: ${COMMAND})"
fi
